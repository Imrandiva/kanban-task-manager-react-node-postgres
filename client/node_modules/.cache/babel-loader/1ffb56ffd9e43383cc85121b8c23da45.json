{"ast":null,"code":"var _jsxFileName = \"/Users/imrandiva/react-kanban-board-challenge-master/client/src/components/card/card.js\";\nimport React from 'react';\nimport './styles.css';\nimport { Button } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nuseEffect(() => {\n  navigator.geolocation.getCurrentPosition(function (position) {\n    setLat(position.coords.latitude);\n    setLong(position.coords.longitude);\n  });\n  getWeather(lat, long).then(weather => {\n    setWeatherData(weather);\n    setError(null);\n  }).catch(err => {\n    setError(err.message);\n  });\n  getForecast(lat, long).then(data => {\n    setForecast(data);\n    setError(null);\n  }).catch(err => {\n    setError(err.message);\n  });\n}, [lat, long, error]);\n\nfunction handleResponse(response) {\n  if (response.ok) {\n    return response.json();\n  } else {\n    throw new Error(\"Please Enable your Location in your browser!\");\n  }\n}\n\nfunction getWeather(lat, long) {\n  return fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`).then(res => handleResponse(res)).then(weather => {\n    if (Object.entries(weather).length) {\n      const mappedData = mapDataToWeatherInterface(weather);\n      return mappedData;\n    }\n  });\n}\n\nfunction getForecast(lat, long) {\n  return fetch(`${process.env.REACT_APP_API_URL}/forecast/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`).then(res => handleResponse(res)).then(forecastData => {\n    if (Object.entries(forecastData).length) {\n      return forecastData.list.filter(forecast => forecast.dt_txt.match(/09:00:00/)).map(mapDataToWeatherInterface);\n    }\n  });\n}\n\nfunction mapDataToWeatherInterface(data) {\n  const mapped = {\n    date: data.dt * 1000,\n    // convert from seconds to milliseconds\n    description: data.weather[0].main,\n    temperature: Math.round(data.main.temp)\n  }; // Add extra properties for the five day forecast: dt_txt, icon, min, max\n\n  if (data.dt_txt) {\n    mapped.dt_txt = data.dt_txt;\n  }\n\n  return mapped;\n}\n\nconst refresh = () => {\n  window.location.reload();\n};\n\nconst WeatherCard = () => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"mt-20 layout-column justify-content-center align-items-center\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"main\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"top\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"p\", {\n  className: \"header\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }\n}, \"Weather in Stockholm today\"), /*#__PURE__*/React.createElement(Button, {\n  className: \"button\",\n  inverted: true,\n  color: \"blue\",\n  circular: true,\n  icon: \"refresh\",\n  onClick: refresh,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }\n})), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"flex\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"p\", {\n  className: \"day\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"span\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 28\n  }\n}, \"Hello\")), /*#__PURE__*/React.createElement(\"p\", {\n  className: \"description\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }\n}, \"Hello\")), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"flex\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"p\", {\n  className: \"temp\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }\n}, \"Temprature:\"), /*#__PURE__*/React.createElement(\"p\", {\n  className: \"temp\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }\n}, \"Humidity:\")), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"flex\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"p\", {\n  className: \"sunrise-sunset\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }\n}, \"Sunrise:\"))));\n\nexport default WeatherCard;","map":{"version":3,"sources":["/Users/imrandiva/react-kanban-board-challenge-master/client/src/components/card/card.js"],"names":["React","Button","useEffect","navigator","geolocation","getCurrentPosition","position","setLat","coords","latitude","setLong","longitude","getWeather","lat","long","then","weather","setWeatherData","setError","catch","err","message","getForecast","data","setForecast","error","handleResponse","response","ok","json","Error","fetch","process","env","REACT_APP_API_URL","REACT_APP_API_KEY","res","Object","entries","length","mappedData","mapDataToWeatherInterface","forecastData","list","filter","forecast","dt_txt","match","map","mapped","date","dt","description","main","temperature","Math","round","temp","refresh","window","location","reload","WeatherCard"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './styles.css';\nimport { Button } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css'\n\nuseEffect(() => {\n  navigator.geolocation.getCurrentPosition(function(position) {\n    setLat(position.coords.latitude);\n    setLong(position.coords.longitude);\n  });\n\n  getWeather(lat, long)\n  .then(weather => {\n    setWeatherData(weather);\n    setError(null);\n  })\n  .catch(err => {\n    setError(err.message);\n  });\n\n  getForecast(lat, long)\n    .then(data => {\n      setForecast(data);\n      setError(null);\n    })\n    .catch(err => {\n      setError(err.message);\n    });\n\n}, [lat,long,error])\n\nfunction handleResponse(response) {\nif (response.ok) {\n  return response.json();\n} else {\n  throw new Error(\"Please Enable your Location in your browser!\");\n}\n}\n\nfunction getWeather(lat, long) {\nreturn fetch(\n  `${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`\n)\n  .then(res => handleResponse(res))\n  .then(weather => {\n    if (Object.entries(weather).length) {\n      const mappedData = mapDataToWeatherInterface(weather);\n      return mappedData;\n    }\n  });\n}\n\nfunction getForecast(lat, long) {\nreturn fetch(\n  `${process.env.REACT_APP_API_URL}/forecast/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`\n)\n  .then(res => handleResponse(res))\n  .then(forecastData => {\n    if (Object.entries(forecastData).length) {\n      return forecastData.list\n        .filter(forecast => forecast.dt_txt.match(/09:00:00/))\n        .map(mapDataToWeatherInterface);\n    }\n  });\n}\n\nfunction mapDataToWeatherInterface(data) {\nconst mapped = {\n  date: data.dt * 1000, // convert from seconds to milliseconds\n  description: data.weather[0].main,\n  temperature: Math.round(data.main.temp),\n};\n\n// Add extra properties for the five day forecast: dt_txt, icon, min, max\nif (data.dt_txt) {\n  mapped.dt_txt = data.dt_txt;\n}\n\nreturn mapped;\n}\n\nconst refresh = () => {\n  window.location.reload();\n}\n\nconst WeatherCard = () => (\n    <div className=\"mt-20 layout-column justify-content-center align-items-center\">\n  <div className=\"main\">\n      <div className=\"top\">\n        <p className=\"header\">Weather in Stockholm today</p>\n        <Button className=\"button\" inverted color='blue' circular icon='refresh' onClick={refresh} />\n      </div>\n      <div className=\"flex\">\n        <p className=\"day\"><span>Hello</span></p>\n        <p className=\"description\">Hello</p>\n      </div>\n\n      <div className=\"flex\">\n        <p className=\"temp\">Temprature:</p>\n        <p className=\"temp\">Humidity:</p>\n      </div>\n\n      <div className=\"flex\">\n        <p className=\"sunrise-sunset\">Sunrise:</p>\n      </div>\n    \n  </div>\n  </div>\n)\n\nexport default WeatherCard;"]},"metadata":{},"sourceType":"module"}