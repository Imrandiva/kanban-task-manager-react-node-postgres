{"ast":null,"code":"var _jsxFileName = \"/Users/imrandiva/react-kanban-board-challenge-master/client/src/components/kanban-board/index.js\";\nimport React, { Component } from \"react\";\nimport \"./index.css\";\nimport InfiniteCalendar from 'react-infinite-calendar';\nimport 'react-infinite-calendar/styles.css';\nexport default class KanbanBoard extends Component {\n  constructor() {\n    super(); // Each task is uniquely identified by its name. \n    // Therefore, when you perform any operation on tasks, make sure you pick tasks by names (primary key) instead of any kind of index or any other attribute.\n\n    this.onEditTask = e => {\n      this.setState({\n        changeTask: e.target.value\n      });\n    };\n\n    this.onInputChange = e => {\n      this.setState({\n        inputValue: e.target.value\n      });\n    };\n\n    this.onCourseInputChange = e => {\n      this.setState({\n        courseInput: e.target.value\n      });\n    };\n\n    this.addTask = () => {\n      if (this.state.inputValue) {\n        const _tasks = this.state.tasks;\n        this.createMerchant(this.state.inputValue, this.state.courseInput, this.state.dateInput);\n\n        _tasks.push({\n          name: this.state.inputValue,\n          course: this.state.courseInput,\n          chosenDate: this.state.dateInput,\n          stage: 0\n        });\n\n        this.setState({\n          tasks: _tasks,\n          inputValue: ''\n        });\n        this.setState({\n          tasks: _tasks,\n          courseInput: ''\n        });\n        this.setState({\n          tasks: _tasks,\n          dateInput: ''\n        });\n      }\n    };\n\n    this.enterAddTask = e => {\n      if (e.key === 'Enter') {\n        this.addTask();\n      }\n    };\n\n    this.back = name => {\n      let _tasks = this.state.tasks;\n      _tasks = _tasks.map(task => {\n        if (task.name == name) return {\n          tid: task.tid,\n          name: task.name,\n          course: task.course,\n          chosenDate: task.chosenDate,\n          stage: task.stage == 0 ? 0 : task.stage - 1\n        };else return task;\n      });\n      this.setState({\n        tasks: _tasks\n      });\n    };\n\n    this.forward = name => {\n      let _tasks = this.state.tasks;\n      _tasks = _tasks.map(task => {\n        if (task.name == name) return {\n          tid: task.tid,\n          name: task.name,\n          course: task.course,\n          chosenDate: task.chosenDate,\n          stage: task.stage == 3 ? 3 : task.stage + 1\n        };else return task;\n      });\n      this.setState({\n        tasks: _tasks\n      });\n    };\n\n    this.remove = name => {\n      // Find id where name is part of id\n      let _tasks = this.state.tasks;\n      let idToDelete = 0;\n\n      for (let i = 0; i < Object.keys(_tasks).length; i++) {\n        if (_tasks[i].name = name) {\n          idToDelete = _tasks[i].tid;\n          console.log(_tasks[i].name);\n          console.log(_tasks[i].tid);\n\n          _tasks.splice(i, 1);\n\n          this.deleteMerchant(idToDelete);\n          this.setState({\n            tasks: _tasks\n          });\n        }\n      }\n\n      ;\n    };\n\n    this.update = name => {\n      // Find id where name is part of id\n      let _tasks = this.state.tasks;\n      let idToUpdate = 0;\n      let column = prompt(\"Which part would you like to change?\");\n\n      if (column != \"name\" && column != \"course\" && column != \"date\") {\n        alert(\"There is no such column as \" + column + \" on this to-do list\");\n        return;\n      }\n\n      let change = prompt(\"What would you like to change it to?\");\n\n      for (let i = 0; i < Object.keys(_tasks).length; i++) {\n        if (_tasks[i].name == name) {\n          if (column == \"name\") {\n            this.remove(name);\n            this.createMerchant(change, _tasks[i].tid, _tasks[i].tid);\n          } else if (column == \"course\") {\n            this.remove(name);\n            this.createMerchant(_tasks[i].tid, change, _tasks[i].tid);\n          } else if (column == \"date\") {\n            this.remove(name);\n            this.createMerchant(_tasks[i].tid, _tasks[i].tid, change);\n          }\n\n          idToUpdate = _tasks[i].tid;\n          console.log(_tasks[i].name);\n          console.log(_tasks[i].tid);\n          this.addTask(); // this.updateMerchant(idToUpdate, column, change);\n\n          this.setState({\n            tasks: _tasks\n          });\n        }\n      }\n\n      ;\n    };\n\n    this.saveProgress = () => {\n      let _tasks = this.state.tasks;\n\n      for (let i = 0; i < Object.keys(_tasks).length; i++) {\n        this.updateStage(_tasks[i].tid, _tasks[i].stage);\n        console.log(_tasks[i].tid);\n        console.log(_tasks[i].name);\n      }\n\n      ;\n      this.setState({\n        tasks: _tasks\n      });\n    };\n\n    this.test = () => {\n      alert(\"I am an alert box!\");\n    };\n\n    this.state = {\n      tasks: [],\n      inputValue: '',\n      courseInput: '',\n      dateInput: '',\n      calendarDate: new Date(),\n      count: 0,\n      changeTask: '',\n      showForm: false,\n      chosenColumn: 'task_name',\n      currentName: ''\n    };\n    this.stagesNames = ['Backlog', 'To Do', 'Ongoing', 'Review'];\n    this.handleChange = this.handleChange.bind(this);\n    this.onFormSubmit = this.onFormSubmit.bind(this); // this.onClick = this.onClick.bind(this);\n\n    this.handleEdit = this.handleEdit.bind(this);\n    this.getMerchant();\n  }\n\n  async getMerchant() {\n    const datafiles = [];\n    await fetch('http://localhost:3001').then(response => {\n      // alert(response.tid);\n      return response.text();\n    }).then(data => {\n      const obj = JSON.parse(data);\n\n      for (let i = 0; i < Object.keys(obj).length; i++) {\n        datafiles.push({\n          tid: obj[i].tid,\n          name: obj[i].task_name,\n          course: obj[i].course,\n          chosenDate: obj[i].due_date,\n          stage: obj[i].stage\n        }); // alert(obj[i].tid);\n      }\n\n      ;\n      this.setState({\n        tasks: datafiles\n      });\n    });\n  }\n\n  async createMerchant(name, course, due_date) {\n    // let name = prompt('Enter task name');\n    // let course = prompt('Enter task course');\n    // let due_date = prompt('Enter task due date');\n    const stage = 0;\n    await fetch('http://localhost:3001/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        course,\n        due_date,\n        stage\n      })\n    }).then(response => {\n      return response.text();\n    });\n    this.setState({\n      tasks: this.state.tasks\n    });\n    window.location.reload(); //     .then(data => {\n    //       alert(data);\n    //       this.getMerchant();\n    //     });\n  }\n\n  async updateStage(id, stage) {\n    await fetch(`http://localhost:3001/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id,\n        stage\n      })\n    }).then(response => {\n      return response.text();\n    }); // .then(data => {\n    //   // alert(data);\n    //   this.getMerchant();\n    // });\n\n    this.setState({\n      tasks: this.state.tasks\n    }); // window.location.reload();\n  } //   onClick = (name) => {\n  //     // On click we change our state â€“ this will trigger our `render` method\n  //     if(this.state.showForm){\n  //       this.setState({ showForm: false });\n  //     }\n  //     else {\n  //       console.log(name);\n  //     this.setState({ showForm: true, currentName: name });\n  //     }\n  // }\n  // renderForm = () => {\n  //    return (\n  //        <div className=\"mt-50 layout-column\"> \n  //         <form onSubmit={this.onFormSubmit}>\n  //         <label>\n  //           <p>What to change</p>\n  //           <select value={this.state.chosenColumn} onChange={this.handleEdit}>\n  //             <option value=\"task_name\">Task name</option>\n  //             <option value=\"course\">Course</option>\n  //             <option value=\"due_date\">Due date</option> \n  //           </select>\n  //         </label>\n  //       </form>\n  //          <input value={this.state.changeTask} onChange={this.onEditTask} id=\"create-task-input\" type=\"text\" className=\"large\" placeholder=\"New task name\" data-testid=\"create-task-input\" />\n  //          {this.state.chosenColumn} \n  //          {this.state.changeTask} \n  //          <button onClick={this.confirmUpdates} type=\"submit\" className=\"addthetask\" data-testid=\"update-task-button\">Confirm changes</button>\n  //       </div>\n  //    );\n  // }\n  // confirmUpdates = () => {\n  //   let idToUpdate;\n  //   let name = this.state.currentName;\n  //   let _tasks = this.state.tasks;\n  //   for (let i =0; i < Object.keys(_tasks).length; i++) {\n  //     if (_tasks[i].name = name) {\n  //       idToUpdate = _tasks[i].tid;\n  //       if (this.state.chosenColumn == 'task_name'){\n  //         _tasks.push({id: idToUpdate, name: this.state.changeTask, course: _tasks[i].course, chosenDate:  _tasks[i].chosenDate,  stage:  _tasks[i].stage });\n  //       }\n  //       else if (this.state.chosenColumn == 'course') {\n  //         _tasks.push({id: idToUpdate, name: _tasks[i].name, course: this.state.changeTask, chosenDate:  _tasks[i].chosenDate,  stage:  _tasks[i].stage });\n  //       }\n  //       else {\n  //         _tasks.push({id: idToUpdate, name: _tasks[i].name, course: _tasks[i].course, chosenDate: this.state.changeTask, stage:  _tasks[i].stage });\n  //       }\n  //       this.updateTask(idToUpdate, this.state.chosenColumn, this.state.changeTask);\n  //       this.saveProgress(_tasks[i].id, _tasks[i].stage);\n  //       // this.setState({ tasks: _tasks, chosenColumn:'', changeTask: 'task_name', showForm: false });  \n  //       _tasks.splice(i, 1);\n  //     }\n  //   }\n  // }\n\n\n  async deleteMerchant(id) {\n    await fetch(`http://localhost:3001/tasks/${id}`, {\n      method: 'DELETE'\n    }).then(response => {\n      return response.text();\n    }).then(data => {\n      // alert(data);\n      this.getMerchant();\n    }); // window.location.reload();\n  }\n\n  async updateMerchant(id, column, change) {\n    await fetch(`http://localhost:3001/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id,\n        column,\n        change\n      })\n    }).then(response => {\n      return response.text();\n    }); // .then(data => {\n    //   // alert(data);\n    //   this.getMerchant();\n    // });\n\n    this.setState({\n      tasks: this.state.tasks\n    }); // window.location.reload();\n  }\n\n  handleChange(date) {\n    this.setState({\n      calendarDate: date.toISOString().split('T')[0],\n      dateInput: date.toISOString().split('T')[0].toString()\n    });\n  }\n\n  handleEdit(event) {\n    this.setState({\n      chosenColumn: event.target.value\n    });\n  }\n\n  onFormSubmit(e) {\n    e.preventDefault();\n    console.log(this.state.chosenDate);\n  }\n\n  render() {\n    const {\n      tasks\n    } = this.state;\n    let stagesTasks = [];\n\n    for (let i = 0; i < this.stagesNames.length; i++) {\n      stagesTasks.push([]);\n    }\n\n    for (let task of tasks) {\n      const stageId = task.stage;\n      stagesTasks[stageId].push(task);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mt-20 layout-column justify-content-center align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      className: \"deadlineCal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InfiniteCalendar, {\n      selected: this.state.calendarDate,\n      onSelect: this.handleChange,\n      locale: {\n        weekStartsOn: 1\n      },\n      displayOptions: {\n        layout: 'landscape'\n      },\n      width: 800,\n      height: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"mt-50 layout-row align-items-center justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: this.state.inputValue,\n      onChange: this.onInputChange,\n      onKeyDown: this.enterAddTask,\n      id: \"create-task-input\",\n      type: \"text\",\n      className: \"large\",\n      placeholder: \"New task name\",\n      \"data-testid\": \"create-task-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      value: this.state.courseInput,\n      onChange: this.onCourseInputChange,\n      onKeyDown: this.enterAddTask,\n      id: \"create-task-input\",\n      type: \"text\",\n      className: \"large\",\n      placeholder: \"Course code\",\n      \"data-testid\": \"create-task-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      value: this.state.dateInput,\n      onKeyDown: this.enterAddTask,\n      id: \"create-task-input\",\n      type: \"text\",\n      className: \"large\",\n      placeholder: \"Deadline date\",\n      \"data-testid\": \"create-task-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.addTask,\n      type: \"submit\",\n      className: \"addthetask\",\n      \"data-testid\": \"create-task-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 11\n      }\n    }, \"Create task\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.saveProgress,\n      type: \"submit\",\n      className: \"addthetask\",\n      \"data-testid\": \"create-task-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 11\n      }\n    }, \"Save progress\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mt-50 layout-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }\n    }, stagesTasks.map((tasks, i) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card outlined ml-20 mt-0\",\n        key: `${i}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 19\n        }\n      }, this.stagesNames[i]), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"styled mt-50\",\n        \"data-testid\": `stage-${i}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 19\n        }\n      }, tasks.map((task, index) => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          className: \"slide-up-fade-in\",\n          key: `${i}${index}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 30\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"layout-column justify-content-between align-items-center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"section\", {\n          className: \"mt-50 layout-column align-items-center justify-content-center \",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          onClick: () => this.test(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 27\n          }\n        }, task.name), /*#__PURE__*/React.createElement(\"section\", {\n          className: \"mt-50 layout-row align-items-center justify-content-center \",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"taskIcon\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 27\n          }\n        }, task.course), /*#__PURE__*/React.createElement(\"span\", {\n          onClick: () => this.test(),\n          className: \"taskIcon2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 27\n          }\n        }, task.chosenDate.split(\"T\")[0]))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"icons\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => this.back(task.name),\n          className: \"icon-only small mx-2\",\n          disabled: task.stage == 0,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: \"material-icons\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 31\n          }\n        }, \"arrow_back\")), /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => this.forward(task.name),\n          className: \"icon-only small mx-2\",\n          disabled: task.stage == 3,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: \"material-icons\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 31\n          }\n        }, \"arrow_forward\")), /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => this.remove(task.name),\n          className: \"icon-only medium mx-2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: \"material-icons\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 31\n          }\n        }, \"checkmark\")), /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => this.update(task.name),\n          className: \"icon-only small mx-2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: \"material-icons\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 31\n          }\n        }, \"settings\")))));\n      }))));\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/imrandiva/react-kanban-board-challenge-master/client/src/components/kanban-board/index.js"],"names":["React","Component","InfiniteCalendar","KanbanBoard","constructor","onEditTask","e","setState","changeTask","target","value","onInputChange","inputValue","onCourseInputChange","courseInput","addTask","state","_tasks","tasks","createMerchant","dateInput","push","name","course","chosenDate","stage","enterAddTask","key","back","map","task","tid","forward","remove","idToDelete","i","Object","keys","length","console","log","splice","deleteMerchant","update","idToUpdate","column","prompt","alert","change","saveProgress","updateStage","test","calendarDate","Date","count","showForm","chosenColumn","currentName","stagesNames","handleChange","bind","onFormSubmit","handleEdit","getMerchant","datafiles","fetch","then","response","text","data","obj","JSON","parse","task_name","due_date","method","headers","body","stringify","window","location","reload","id","updateMerchant","date","toISOString","split","toString","event","preventDefault","render","stagesTasks","stageId","weekStartsOn","layout","index"],"mappings":"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","sourcesContent":["import React, {Component } from \"react\";\nimport \"./index.css\";\nimport InfiniteCalendar from 'react-infinite-calendar';\nimport 'react-infinite-calendar/styles.css';\n\n\n\n\n\nexport default class KanbanBoard extends Component {\n  constructor() {\n    super();\n    // Each task is uniquely identified by its name. \n    // Therefore, when you perform any operation on tasks, make sure you pick tasks by names (primary key) instead of any kind of index or any other attribute.\n\n    this.state = {\n      \n      tasks: [],\n      inputValue: '',\n      courseInput: '',\n      dateInput: '',\n      calendarDate: new Date(),\n      count: 0,\n\n      changeTask: '', \n      showForm: false,\n      chosenColumn: 'task_name',\n      currentName: ''\n      \n\n      \n    };\n    this.stagesNames = ['Backlog', 'To Do', 'Ongoing','Review'];\n    this.handleChange = this.handleChange.bind(this);\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n    // this.onClick = this.onClick.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n\n    this.getMerchant();\n    \n   \n    \n  }\n\n  async getMerchant() {\n    const datafiles = [];\n    await fetch('http://localhost:3001')\n      .then(response => {\n        // alert(response.tid);\n        return response.text();\n      })\n      .then(data => { \n        const obj = JSON.parse(data);\n        for (let i =0; i < Object.keys(obj).length; i++) {\n            \n          datafiles.push({\n            tid: obj[i].tid,\n            name: obj[i].task_name,\n            course: obj[i].course,\n            chosenDate: obj[i].due_date,\n            stage: obj[i].stage,\n            \n\n          }); \n        // alert(obj[i].tid);\n      \n          };\n\n          this.setState({tasks: datafiles});\n\n      });\n  }\n\n  \n\n  \n\n  async createMerchant(name, course, due_date) {\n    // let name = prompt('Enter task name');\n    // let course = prompt('Enter task course');\n    // let due_date = prompt('Enter task due date');\n    const stage = 0;\n    await fetch('http://localhost:3001/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({name, course, due_date,stage}),\n    })\n      .then(response => {\n        return response.text();\n      })\n      this.setState({ tasks: this.state.tasks });\n\n      window.location.reload();\n    \n      \n      \n  //     .then(data => {\n  //       alert(data);\n  //       this.getMerchant();\n  //     });\n  }\n  async updateStage(id, stage) {\n    await fetch(`http://localhost:3001/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({id, stage}),\n    })\n      .then(response => {\n        return response.text();\n      })\n      // .then(data => {\n      //   // alert(data);\n      //   this.getMerchant();\n      // });\n      this.setState({ tasks: this.state.tasks });\n      \n      \n\n      // window.location.reload();\n  }\n\n//   onClick = (name) => {\n//     // On click we change our state â€“ this will trigger our `render` method\n//     if(this.state.showForm){\n//       this.setState({ showForm: false });\n//     }\n//     else {\n//       console.log(name);\n//     this.setState({ showForm: true, currentName: name });\n//     }\n// }\n\n// renderForm = () => {\n//    return (\n//        <div className=\"mt-50 layout-column\"> \n//         <form onSubmit={this.onFormSubmit}>\n//         <label>\n//           <p>What to change</p>\n//           <select value={this.state.chosenColumn} onChange={this.handleEdit}>\n//             <option value=\"task_name\">Task name</option>\n//             <option value=\"course\">Course</option>\n//             <option value=\"due_date\">Due date</option> \n//           </select>\n//         </label>\n//       </form>\n     \n//          <input value={this.state.changeTask} onChange={this.onEditTask} id=\"create-task-input\" type=\"text\" className=\"large\" placeholder=\"New task name\" data-testid=\"create-task-input\" />\n//          {this.state.chosenColumn} \n//          {this.state.changeTask} \n//          <button onClick={this.confirmUpdates} type=\"submit\" className=\"addthetask\" data-testid=\"update-task-button\">Confirm changes</button>\n\n//       </div>\n//    );\n// }\n\n\n  // confirmUpdates = () => {\n  //   let idToUpdate;\n  //   let name = this.state.currentName;\n  //   let _tasks = this.state.tasks;\n  //   for (let i =0; i < Object.keys(_tasks).length; i++) {\n  //     if (_tasks[i].name = name) {\n  //       idToUpdate = _tasks[i].tid;\n  //       if (this.state.chosenColumn == 'task_name'){\n  //         _tasks.push({id: idToUpdate, name: this.state.changeTask, course: _tasks[i].course, chosenDate:  _tasks[i].chosenDate,  stage:  _tasks[i].stage });\n  //       }\n  //       else if (this.state.chosenColumn == 'course') {\n  //         _tasks.push({id: idToUpdate, name: _tasks[i].name, course: this.state.changeTask, chosenDate:  _tasks[i].chosenDate,  stage:  _tasks[i].stage });\n  //       }\n  //       else {\n  //         _tasks.push({id: idToUpdate, name: _tasks[i].name, course: _tasks[i].course, chosenDate: this.state.changeTask, stage:  _tasks[i].stage });\n  //       }\n\n  //       this.updateTask(idToUpdate, this.state.chosenColumn, this.state.changeTask);\n  //       this.saveProgress(_tasks[i].id, _tasks[i].stage);\n  //       // this.setState({ tasks: _tasks, chosenColumn:'', changeTask: 'task_name', showForm: false });  \n  //       _tasks.splice(i, 1);\n  //     }\n  //   }\n  // }\n    async deleteMerchant(id) {\n      \n    await fetch(`http://localhost:3001/tasks/${id}`, {\n      method: 'DELETE',\n    })\n      .then(response => {\n        return response.text();\n      })\n      .then(data => {\n        // alert(data);\n        this.getMerchant();\n      });\n\n      // window.location.reload();\n  }\n\n  async updateMerchant(id, column, change) {    \n    await fetch(`http://localhost:3001/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({id, column, change}),\n    })\n      .then(response => {\n        return response.text();\n      })\n      // .then(data => {\n      //   // alert(data);\n      //   this.getMerchant();\n      // });\n      this.setState({ tasks: this.state.tasks });\n\n      \n      \n\n      // window.location.reload();\n  }\n\n  handleChange(date) {\n    this.setState({\n      calendarDate: date.toISOString().split('T')[0],\n      dateInput: date.toISOString().split('T')[0].toString()\n    })\n     \n  }\n\n  handleEdit(event) {\n    this.setState({chosenColumn: event.target.value});\n  }\n\n  onFormSubmit(e) {\n    e.preventDefault();\n    console.log(this.state.chosenDate)\n    \n  }\n  \n  onEditTask = (e) => {\n    this.setState({\n      changeTask: e.target.value\n    })\n\n  }\n  onInputChange = (e) => {\n    this.setState({\n      inputValue: e.target.value\n    })\n  }\n  \n  onCourseInputChange = (e) => {\n    this.setState({\n      courseInput: e.target.value\n    })\n  }\n  addTask = () => {\n    if (this.state.inputValue) {\n      const _tasks = this.state.tasks;\n      this.createMerchant(this.state.inputValue, this.state.courseInput, this.state.dateInput);\n      _tasks.push({ name: this.state.inputValue, course: this.state.courseInput, chosenDate: this.state.dateInput,  stage: 0 });\n     \n      \n      this.setState({ tasks: _tasks, inputValue:'' });\n      this.setState({ tasks: _tasks, courseInput:'' });\n      this.setState({ tasks: _tasks, dateInput:'' });\n\n   \n      \n    }\n    \n  }\n\n  enterAddTask = (e) => {\n    if (e.key === 'Enter') {\n      this.addTask()\n    }\n  }\n  back = (name) => {\n    let _tasks = this.state.tasks;\n    _tasks = _tasks.map((task) => {\n      if (task.name == name) return {tid: task.tid, name: task.name, course: task.course,chosenDate: task.chosenDate, stage: task.stage == 0 ? 0 : task.stage -1  };\n      else return task;\n    });\n\n    this.setState({ tasks: _tasks });\n  }\n\n  forward = (name) => {\n    let _tasks = this.state.tasks;\n    _tasks = _tasks.map((task) => {\n      if (task.name == name) return { tid: task.tid, name: task.name, course: task.course,chosenDate: task.chosenDate, stage: task.stage == 3 ? 3 : task.stage +1  };\n      else return task;\n    });\n\n    this.setState({ tasks: _tasks });\n  }\n\n  remove = (name) => {\n     // Find id where name is part of id\n     let _tasks = this.state.tasks;\n     let idToDelete = 0;\n     for (let i =0; i < Object.keys(_tasks).length; i++) {\n      if (_tasks[i].name = name) {\n        idToDelete = _tasks[i].tid;\n        console.log(_tasks[i].name);\n        console.log(_tasks[i].tid);\n        _tasks.splice(i, 1);\n         this.deleteMerchant(idToDelete);\n         this.setState({ tasks: _tasks });\n         \n      }\n     \n   };\n   \n    \n  }\n  \n  update = (name) => {\n    // Find id where name is part of id\n    let _tasks = this.state.tasks;\n    let idToUpdate = 0;\n    let column = prompt(\"Which part would you like to change?\");\n    if (column != \"name\" && Â column != \"course\" &&Â column != \"date\") {\n      alert(\"There is no such column as \" + column + \" on this to-do list\")\n      return \n    }\n    let change = prompt(\"What would you like to change it to?\")\n\n    for (let i =0; i < Object.keys(_tasks).length; i++) {\n     if (_tasks[i].name == name) {\n      if (column == \"name\") {\n        this.remove(name)\n        this.createMerchant(change, _tasks[i].tid, _tasks[i].tid)\n      }\n      else if (column == \"course\") {\n        this.remove(name)\n        this.createMerchant(_tasks[i].tid ,change, _tasks[i].tid)\n      }\n      else if (column == \"date\") {\n        this.remove(name)\n        this.createMerchant(_tasks[i].tid , _tasks[i].tid, change)\n      }\n      idToUpdate = _tasks[i].tid;\n       console.log(_tasks[i].name);\n       console.log(_tasks[i].tid);\n       this.addTask()\n      \n        // this.updateMerchant(idToUpdate, column, change);\n        this.setState({ tasks: _tasks });\n\n      \n     }\n    \n  };\n    \n  }\n  \n\n  saveProgress = () => {\n    let _tasks = this.state.tasks;\n\n     for (let i =0; i < Object.keys(_tasks).length; i++) {\n        this.updateStage(_tasks[i].tid, _tasks[i].stage);\n        console.log(_tasks[i].tid);\n        console.log(_tasks[i].name);\n\n      };\n      this.setState({ tasks: _tasks });\n  \n\n\n  }\n\n  test = () => {\n    alert(\"I am an alert box!\");\n\n\n  }\n\n  render() {\n    const { tasks } = this.state;\n    let stagesTasks = [];\n    for (let i = 0; i < this.stagesNames.length; i++) {\n      stagesTasks.push([]);\n    }\n    for (let task of tasks) {\n      const stageId = task.stage;\n      stagesTasks[stageId].push(task);\n      \n    }\n    \n    \n   \n    return (\n      \n      <div className=\"mt-20 layout-column justify-content-center align-items-center\">\n        <section className=\"deadlineCal\">\n          <InfiniteCalendar\n\n            selected={ this.state.calendarDate }\n            onSelect={ this.handleChange }\n            locale={{\n            weekStartsOn: 1}}\n            displayOptions={{\n            layout: 'landscape'\n            }}\n            width={800}\n            height={200}\n          />\n         </section>\n         <section className=\"mt-50 layout-row align-items-center justify-content-center\">\n          <input value={this.state.inputValue} onChange={this.onInputChange} onKeyDown={this.enterAddTask} id=\"create-task-input\" type=\"text\" className=\"large\" placeholder=\"New task name\" data-testid=\"create-task-input\" />\n          <input value={this.state.courseInput} onChange={this.onCourseInputChange} onKeyDown={this.enterAddTask} id=\"create-task-input\" type=\"text\" className=\"large\" placeholder=\"Course code\" data-testid=\"create-task-input\" />\n          <input value={this.state.dateInput} onKeyDown={this.enterAddTask} id=\"create-task-input\" type=\"text\" className=\"large\" placeholder=\"Deadline date\" data-testid=\"create-task-input\" />\n\n        \n          <button onClick={this.addTask} type=\"submit\" className=\"addthetask\" data-testid=\"create-task-button\">Create task</button>\n          <button onClick={this.saveProgress} type=\"submit\" className=\"addthetask\" data-testid=\"create-task-button\">Save progress</button>\n  \n          {/* <button  onClick={this.getMerchant} type=\"submit\" className=\"save-progress\">Delete a task </button> */}\n        </section>\n        <div className=\"mt-50 layout-row\">\n          {stagesTasks.map((tasks, i) => {\n            return (\n              <div className=\"card outlined ml-20 mt-0\" key={`${i}`}>\n                <div className=\"card-text\">\n                  <h4>{this.stagesNames[i]}</h4>\n                  <ul className=\"styled mt-50\" data-testid={`stage-${i}`}>\n                    {tasks.map((task, index) => {\n                      return <li className=\"slide-up-fade-in\" key={`${i}${index}`}>\n                        <div className=\"layout-column justify-content-between align-items-center\">\n                        <section className=\"mt-50 layout-column align-items-center justify-content-center \">\n                          <span  onClick={() => this.test() }>{task.name}</span>\n                          <section className=\"mt-50 layout-row align-items-center justify-content-center \">\n                          <span className=\"taskIcon\">{task.course}</span>\n                          <span onClick={() => this.test() } className=\"taskIcon2\">{task.chosenDate.split(\"T\")[0]}</span>\n                          </section>\n                        </section>\n                          <div className=\"icons\">\n                          {/* <button onClick={() => this.onClick(task.name)} className=\"icon-only small mx-2\">\n                              <i className=\"material-icons\">settings</i>\n                            </button>\n                            {this.state.showForm && this.renderForm()} */}\n                            <button onClick={() => this.back(task.name)} className=\"icon-only small mx-2\"  disabled={task.stage == 0}>\n                              <i className=\"material-icons\">arrow_back</i>\n                            </button>\n                            <button onClick={() => this.forward(task.name)} className=\"icon-only small mx-2\"  disabled={task.stage == 3}>\n                              <i className=\"material-icons\">arrow_forward</i>\n                            </button>\n                            <button onClick={() => this.remove(task.name)} className=\"icon-only medium mx-2\">\n                              <i className=\"material-icons\">checkmark</i>\n                            </button>\n                            <button onClick={() => this.update(task.name)} className=\"icon-only small mx-2\">\n                              <i className=\"material-icons\">settings</i>\n                            </button>\n                    \n                          </div>\n                        </div>\n                      </li>\n                    })}\n                  </ul>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n        \n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}